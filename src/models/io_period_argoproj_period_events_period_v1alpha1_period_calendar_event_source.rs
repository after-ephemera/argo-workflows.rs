/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodCalendarEventSource {
    /// ExclusionDates defines the list of DATE-TIME exceptions for recurring events.
    #[serde(rename = "exclusionDates", skip_serializing_if = "Option::is_none")]
    pub exclusion_dates: Option<Vec<String>>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventSourceFilter>>,
    #[serde(rename = "interval", skip_serializing_if = "Option::is_none")]
    pub interval: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "persistence", skip_serializing_if = "Option::is_none")]
    pub persistence: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventPersistence>>,
    #[serde(rename = "schedule", skip_serializing_if = "Option::is_none")]
    pub schedule: Option<String>,
    #[serde(rename = "timezone", skip_serializing_if = "Option::is_none")]
    pub timezone: Option<String>,
}

impl IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodCalendarEventSource {
    pub fn new() -> IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodCalendarEventSource {
        IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodCalendarEventSource {
            exclusion_dates: None,
            filter: None,
            interval: None,
            metadata: None,
            persistence: None,
            schedule: None,
            timezone: None,
        }
    }
}


