/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodHdfsEventSource {
    #[serde(rename = "addresses", skip_serializing_if = "Option::is_none")]
    pub addresses: Option<Vec<String>>,
    #[serde(rename = "checkInterval", skip_serializing_if = "Option::is_none")]
    pub check_interval: Option<String>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventSourceFilter>>,
    /// HDFSUser is the user to access HDFS file system. It is ignored if either ccache or keytab is used.
    #[serde(rename = "hdfsUser", skip_serializing_if = "Option::is_none")]
    pub hdfs_user: Option<String>,
    #[serde(rename = "krbCCacheSecret", skip_serializing_if = "Option::is_none")]
    pub krb_c_cache_secret: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
    #[serde(rename = "krbConfigConfigMap", skip_serializing_if = "Option::is_none")]
    pub krb_config_config_map: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodConfigMapKeySelector>>,
    #[serde(rename = "krbKeytabSecret", skip_serializing_if = "Option::is_none")]
    pub krb_keytab_secret: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
    /// KrbRealm is the Kerberos realm used with Kerberos keytab It must be set if keytab is used.
    #[serde(rename = "krbRealm", skip_serializing_if = "Option::is_none")]
    pub krb_realm: Option<String>,
    /// KrbServicePrincipalName is the principal name of Kerberos service It must be set if either ccache or keytab is used.
    #[serde(rename = "krbServicePrincipalName", skip_serializing_if = "Option::is_none")]
    pub krb_service_principal_name: Option<String>,
    /// KrbUsername is the Kerberos username used with Kerberos keytab It must be set if keytab is used.
    #[serde(rename = "krbUsername", skip_serializing_if = "Option::is_none")]
    pub krb_username: Option<String>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    #[serde(rename = "watchPathConfig", skip_serializing_if = "Option::is_none")]
    pub watch_path_config: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodWatchPathConfig>>,
}

impl IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodHdfsEventSource {
    pub fn new() -> IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodHdfsEventSource {
        IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodHdfsEventSource {
            addresses: None,
            check_interval: None,
            filter: None,
            hdfs_user: None,
            krb_c_cache_secret: None,
            krb_config_config_map: None,
            krb_keytab_secret: None,
            krb_realm: None,
            krb_service_principal_name: None,
            krb_username: None,
            metadata: None,
            r#type: None,
            watch_path_config: None,
        }
    }
}


