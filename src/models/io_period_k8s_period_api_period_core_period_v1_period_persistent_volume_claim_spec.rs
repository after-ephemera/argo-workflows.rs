/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPersistentVolumeClaimSpec : PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPersistentVolumeClaimSpec {
    /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
    #[serde(rename = "accessModes", skip_serializing_if = "Option::is_none")]
    pub access_modes: Option<Vec<String>>,
    #[serde(rename = "dataSource", skip_serializing_if = "Option::is_none")]
    pub data_source: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodTypedLocalObjectReference>>,
    #[serde(rename = "dataSourceRef", skip_serializing_if = "Option::is_none")]
    pub data_source_ref: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodTypedLocalObjectReference>>,
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodResourceRequirements>>,
    #[serde(rename = "selector", skip_serializing_if = "Option::is_none")]
    pub selector: Option<Box<crate::models::IoPeriodK8sPeriodApimachineryPeriodPkgPeriodApisPeriodMetaPeriodV1PeriodLabelSelector>>,
    /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
    #[serde(rename = "storageClassName", skip_serializing_if = "Option::is_none")]
    pub storage_class_name: Option<String>,
    /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
    #[serde(rename = "volumeMode", skip_serializing_if = "Option::is_none")]
    pub volume_mode: Option<String>,
    /// VolumeName is the binding reference to the PersistentVolume backing this claim.
    #[serde(rename = "volumeName", skip_serializing_if = "Option::is_none")]
    pub volume_name: Option<String>,
}

impl IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPersistentVolumeClaimSpec {
    /// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
    pub fn new() -> IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPersistentVolumeClaimSpec {
        IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodPersistentVolumeClaimSpec {
            access_modes: None,
            data_source: None,
            data_source_ref: None,
            resources: None,
            selector: None,
            storage_class_name: None,
            volume_mode: None,
            volume_name: None,
        }
    }
}


