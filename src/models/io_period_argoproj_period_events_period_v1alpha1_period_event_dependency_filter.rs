/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */

/// IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventDependencyFilter : EventDependencyFilter defines filters and constraints for a io.argoproj.workflow.v1alpha1.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventDependencyFilter {
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventContext>>,
    #[serde(rename = "data", skip_serializing_if = "Option::is_none")]
    pub data: Option<Vec<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodDataFilter>>,
    /// DataLogicalOperator defines how multiple Data filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
    #[serde(rename = "dataLogicalOperator", skip_serializing_if = "Option::is_none")]
    pub data_logical_operator: Option<String>,
    /// ExprLogicalOperator defines how multiple Exprs filters (if defined) are evaluated together. Available values: and (&&), or (||) Is optional and if left blank treated as and (&&).
    #[serde(rename = "exprLogicalOperator", skip_serializing_if = "Option::is_none")]
    pub expr_logical_operator: Option<String>,
    /// Exprs contains the list of expressions evaluated against the event payload.
    #[serde(rename = "exprs", skip_serializing_if = "Option::is_none")]
    pub exprs: Option<Vec<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodExprFilter>>,
    /// Script refers to a Lua script evaluated to determine the validity of an io.argoproj.workflow.v1alpha1.
    #[serde(rename = "script", skip_serializing_if = "Option::is_none")]
    pub script: Option<String>,
    #[serde(rename = "time", skip_serializing_if = "Option::is_none")]
    pub time: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodTimeFilter>>,
}

impl IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventDependencyFilter {
    /// EventDependencyFilter defines filters and constraints for a io.argoproj.workflow.v1alpha1.
    pub fn new() -> IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventDependencyFilter {
        IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventDependencyFilter {
            context: None,
            data: None,
            data_logical_operator: None,
            expr_logical_operator: None,
            exprs: None,
            script: None,
            time: None,
        }
    }
}


