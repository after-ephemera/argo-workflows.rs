/*
 * Argo Workflows API
 *
 * Argo Workflows is an open source container-native workflow engine for orchestrating parallel jobs on Kubernetes. For more information, please see https://argoproj.github.io/argo-workflows/
 *
 * The version of the OpenAPI document: VERSION
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodGithubEventSource {
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "apiToken", skip_serializing_if = "Option::is_none")]
    pub api_token: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
    #[serde(rename = "contentType", skip_serializing_if = "Option::is_none")]
    pub content_type: Option<String>,
    #[serde(rename = "deleteHookOnFinish", skip_serializing_if = "Option::is_none")]
    pub delete_hook_on_finish: Option<bool>,
    #[serde(rename = "events", skip_serializing_if = "Option::is_none")]
    pub events: Option<Vec<String>>,
    #[serde(rename = "filter", skip_serializing_if = "Option::is_none")]
    pub filter: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodEventSourceFilter>>,
    #[serde(rename = "githubApp", skip_serializing_if = "Option::is_none")]
    pub github_app: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodGithubAppCreds>>,
    #[serde(rename = "githubBaseURL", skip_serializing_if = "Option::is_none")]
    pub github_base_url: Option<String>,
    #[serde(rename = "githubUploadURL", skip_serializing_if = "Option::is_none")]
    pub github_upload_url: Option<String>,
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "insecure", skip_serializing_if = "Option::is_none")]
    pub insecure: Option<bool>,
    #[serde(rename = "metadata", skip_serializing_if = "Option::is_none")]
    pub metadata: Option<::std::collections::HashMap<String, String>>,
    /// Organizations holds the names of organizations (used for organization level webhooks). Not required if Repositories is set.
    #[serde(rename = "organizations", skip_serializing_if = "Option::is_none")]
    pub organizations: Option<Vec<String>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<String>,
    /// Repositories holds the information of repositories, which uses repo owner as the key, and list of repo names as the value. Not required if Organizations is set.
    #[serde(rename = "repositories", skip_serializing_if = "Option::is_none")]
    pub repositories: Option<Vec<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodOwnedRepositories>>,
    #[serde(rename = "repository", skip_serializing_if = "Option::is_none")]
    pub repository: Option<String>,
    #[serde(rename = "webhook", skip_serializing_if = "Option::is_none")]
    pub webhook: Option<Box<crate::models::IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodWebhookContext>>,
    #[serde(rename = "webhookSecret", skip_serializing_if = "Option::is_none")]
    pub webhook_secret: Option<Box<crate::models::IoPeriodK8sPeriodApiPeriodCorePeriodV1PeriodSecretKeySelector>>,
}

impl IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodGithubEventSource {
    pub fn new() -> IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodGithubEventSource {
        IoPeriodArgoprojPeriodEventsPeriodV1alpha1PeriodGithubEventSource {
            active: None,
            api_token: None,
            content_type: None,
            delete_hook_on_finish: None,
            events: None,
            filter: None,
            github_app: None,
            github_base_url: None,
            github_upload_url: None,
            id: None,
            insecure: None,
            metadata: None,
            organizations: None,
            owner: None,
            repositories: None,
            repository: None,
            webhook: None,
            webhook_secret: None,
        }
    }
}


